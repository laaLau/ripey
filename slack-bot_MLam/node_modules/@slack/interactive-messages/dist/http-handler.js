'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.errorCodes = undefined;

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

exports.createHTTPHandler = createHTTPHandler;

var _debug = require('debug');

var _debug2 = _interopRequireDefault(_debug);

var _rawBody = require('raw-body');

var _rawBody2 = _interopRequireDefault(_rawBody);

var _querystring = require('querystring');

var _querystring2 = _interopRequireDefault(_querystring);

var _crypto = require('crypto');

var _crypto2 = _interopRequireDefault(_crypto);

var _tsscmp = require('tsscmp');

var _tsscmp2 = _interopRequireDefault(_tsscmp);

var _util = require('./util');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var debug = (0, _debug2.default)('@slack/interactive-messages:http-handler');

var errorCodes = exports.errorCodes = {
  SIGNATURE_VERIFICATION_FAILURE: 'SLACKHTTPHANDLER_REQUEST_SIGNATURE_VERIFICATION_FAILURE',
  REQUEST_TIME_FAILURE: 'SLACKHTTPHANDLER_REQUEST_TIMELIMIT_FAILURE'
};

function createHTTPHandler(adapter) {
  var poweredBy = (0, _util.packageIdentifier)();

  /**
   * Handles sending responses
   *
   * @param {Object} res - Response object
   * @returns {Function} Returns a function used to send response
   */
  function sendResponse(res) {
    return function _sendResponse(dispatchResult) {
      var status = dispatchResult.status,
          content = dispatchResult.content;

      res.statusCode = status;
      res.setHeader('X-Slack-Powered-By', poweredBy);
      if (typeof content === 'string') {
        res.end(content);
      } else if (content) {
        res.setHeader('Content-Type', 'application/json');
        res.end(JSON.stringify(content));
      } else {
        res.end();
      }
    };
  }

  /**
   * Parses raw bodies of requests
   *
   * @param {string} body - Raw body of request
   * @returns {Object} Parsed body of the request
   */
  function parseBody(body) {
    var parsedBody = _querystring2.default.parse(body);
    if (parsedBody.payload) {
      return JSON.parse(parsedBody.payload);
    }

    return parsedBody;
  }

  /**
   * Method to verify signature of requests
   *
   * @param {string} signingSecret - Signing secret used to verify request signature
   * @param {Object} requestHeaders - Request headers
   * @param {string} body - Raw body string
   * @returns {boolean} Indicates if request is verified
   */
  function verifyRequestSignature(signingSecret, requestHeaders, body) {
    // Request signature
    var signature = requestHeaders['x-slack-signature'];
    // Request timestamp
    var ts = requestHeaders['x-slack-request-timestamp'];

    // Divide current date to match Slack ts format
    // Subtract 5 minutes from current time
    var fiveMinutesAgo = Math.floor(Date.now() / 1000) - 60 * 5;

    if (ts < fiveMinutesAgo) {
      debug('request is older than 5 minutes');
      var error = new Error('Slack request signing verification failed');
      error.code = errorCodes.REQUEST_TIME_FAILURE;
      throw error;
    }

    var hmac = _crypto2.default.createHmac('sha256', signingSecret);

    var _signature$split = signature.split('='),
        _signature$split2 = _slicedToArray(_signature$split, 2),
        version = _signature$split2[0],
        hash = _signature$split2[1];

    hmac.update(`${version}:${ts}:${body}`);

    if (!(0, _tsscmp2.default)(hash, hmac.digest('hex'))) {
      debug('request signature is not valid');
      var _error = new Error('Slack request signing verification failed');
      _error.code = errorCodes.SIGNATURE_VERIFICATION_FAILURE;
      throw _error;
    }

    debug('request signing verification success');
    return true;
  }

  /**
   * Request listener used to handle Slack requests and send responses and
   * verify request signatures
   *
   * @param {Object} req - Request object
   * @param {Object} res - Response object
   */
  return function slackRequestListener(req, res) {
    debug('request received - method: %s, path: %s', req.method, req.url);
    // Function used to send response
    var respond = sendResponse(res);

    // Builds body of the request from stream and returns the raw request body
    (0, _rawBody2.default)(req).then(function (r) {
      var rawBody = r.toString();

      if (verifyRequestSignature(adapter.signingSecret, req.headers, rawBody)) {
        // Request signature is verified
        // Parse raw body
        var body = parseBody(rawBody);

        if (body.ssl_check) {
          respond({ status: 200 });
          return;
        }

        var dispatchResult = adapter.dispatch(body);

        if (dispatchResult) {
          dispatchResult.then(respond);
        } else {
          // No callback was matched
          debug('no callback was matched');
          respond({ status: 404 });
        }
      }
    }).catch(function (error) {
      if (error.code === errorCodes.SIGNATURE_VERIFICATION_FAILURE || error.code === errorCodes.REQUEST_TIME_FAILURE) {
        respond({ status: 404 });
      } else if (process.env.NODE_ENV === 'development') {
        respond({ status: 500, content: error.message });
      } else {
        respond({ status: 500 });
      }
    });
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=http-handler.js.map