'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.errorCodes = undefined;
exports.createExpressMiddleware = createExpressMiddleware;

var _debug = require('debug');

var _debug2 = _interopRequireDefault(_debug);

var _util = require('./util');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var errorCodes = exports.errorCodes = {
  NO_BODY_PARSER: 'SLACKMESSAGEMIDDLEWARE_NO_BODY_PARSER',
  TOKEN_VERIFICATION_FAILURE: 'SLACKMESSAGEMIDDLEWARE_TOKEN_VERIFICATION_FAILURE'
};

var debug = (0, _debug2.default)('@slack/interactive-messages:express-middleware');

function createExpressMiddleware(adapter) {
  var poweredBy = (0, _util.packageIdentifier)();

  // This function binds a specific response instance to a function
  function sendResponse(res) {
    return function _sendResponse(dispatchResult) {
      var status = dispatchResult.status,
          content = dispatchResult.content;


      res.status(status);
      res.set('X-Slack-Powered-By', poweredBy);

      if (typeof content === 'string') {
        res.send(content);
      } else if (content) {
        res.json(content);
      } else {
        res.end();
      }
    };
  }

  return function slackMessageAdapterMiddleware(req, res, next) {
    debug('request received - method: %s, path: %s', req.method, req.path);

    // Bind a response function to this request's respond object. This may be used in a number of
    // places
    var respond = sendResponse(res);

    // Check that the request body has been parsed
    if (!req.body) {
      var error = new Error('The incoming HTTP request did not have a parsed body.');
      error.code = errorCodes.NO_BODY_PARSER;
      next(error);
      return;
    }

    if (req.body.ssl_check) {
      respond({ status: 200 });
      return;
    }

    var payload = JSON.parse(req.body.payload);

    // Handle request token verification
    if (!payload.token || payload.token !== adapter.verificationToken) {
      debug('request token verification failure');
      var _error = new Error('Slack interactive message verification failed');
      _error.code = errorCodes.TOKEN_VERIFICATION_FAILURE;
      next(_error);
      return;
    }
    debug('request token verification success');

    var dispatchResult = adapter.dispatch(payload);
    if (dispatchResult) {
      dispatchResult.then(respond);
    } else {
      next();
    }
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9leHByZXNzLW1pZGRsZXdhcmUuanMiXSwibmFtZXMiOlsiY3JlYXRlRXhwcmVzc01pZGRsZXdhcmUiLCJlcnJvckNvZGVzIiwiTk9fQk9EWV9QQVJTRVIiLCJUT0tFTl9WRVJJRklDQVRJT05fRkFJTFVSRSIsImRlYnVnIiwiYWRhcHRlciIsInBvd2VyZWRCeSIsInNlbmRSZXNwb25zZSIsInJlcyIsIl9zZW5kUmVzcG9uc2UiLCJkaXNwYXRjaFJlc3VsdCIsInN0YXR1cyIsImNvbnRlbnQiLCJzZXQiLCJzZW5kIiwianNvbiIsImVuZCIsInNsYWNrTWVzc2FnZUFkYXB0ZXJNaWRkbGV3YXJlIiwicmVxIiwibmV4dCIsIm1ldGhvZCIsInBhdGgiLCJyZXNwb25kIiwiYm9keSIsImVycm9yIiwiRXJyb3IiLCJjb2RlIiwic3NsX2NoZWNrIiwicGF5bG9hZCIsIkpTT04iLCJwYXJzZSIsInRva2VuIiwidmVyaWZpY2F0aW9uVG9rZW4iLCJkaXNwYXRjaCIsInRoZW4iXSwibWFwcGluZ3MiOiI7Ozs7OztRQVVnQkEsdUIsR0FBQUEsdUI7O0FBVmhCOzs7O0FBQ0E7Ozs7QUFFTyxJQUFNQyxrQ0FBYTtBQUN4QkMsa0JBQWdCLHVDQURRO0FBRXhCQyw4QkFBNEI7QUFGSixDQUFuQjs7QUFLUCxJQUFNQyxRQUFRLHFCQUFhLGdEQUFiLENBQWQ7O0FBRU8sU0FBU0osdUJBQVQsQ0FBaUNLLE9BQWpDLEVBQTBDO0FBQy9DLE1BQU1DLFlBQVksOEJBQWxCOztBQUVBO0FBQ0EsV0FBU0MsWUFBVCxDQUFzQkMsR0FBdEIsRUFBMkI7QUFDekIsV0FBTyxTQUFTQyxhQUFULENBQXVCQyxjQUF2QixFQUF1QztBQUFBLFVBQ3BDQyxNQURvQyxHQUNoQkQsY0FEZ0IsQ0FDcENDLE1BRG9DO0FBQUEsVUFDNUJDLE9BRDRCLEdBQ2hCRixjQURnQixDQUM1QkUsT0FENEI7OztBQUc1Q0osVUFBSUcsTUFBSixDQUFXQSxNQUFYO0FBQ0FILFVBQUlLLEdBQUosQ0FBUSxvQkFBUixFQUE4QlAsU0FBOUI7O0FBRUEsVUFBSSxPQUFPTSxPQUFQLEtBQW1CLFFBQXZCLEVBQWlDO0FBQy9CSixZQUFJTSxJQUFKLENBQVNGLE9BQVQ7QUFDRCxPQUZELE1BRU8sSUFBSUEsT0FBSixFQUFhO0FBQ2xCSixZQUFJTyxJQUFKLENBQVNILE9BQVQ7QUFDRCxPQUZNLE1BRUE7QUFDTEosWUFBSVEsR0FBSjtBQUNEO0FBQ0YsS0FiRDtBQWNEOztBQUVELFNBQU8sU0FBU0MsNkJBQVQsQ0FBdUNDLEdBQXZDLEVBQTRDVixHQUE1QyxFQUFpRFcsSUFBakQsRUFBdUQ7QUFDNURmLFVBQU0seUNBQU4sRUFBaURjLElBQUlFLE1BQXJELEVBQTZERixJQUFJRyxJQUFqRTs7QUFFQTtBQUNBO0FBQ0EsUUFBTUMsVUFBVWYsYUFBYUMsR0FBYixDQUFoQjs7QUFFQTtBQUNBLFFBQUksQ0FBQ1UsSUFBSUssSUFBVCxFQUFlO0FBQ2IsVUFBTUMsUUFBUSxJQUFJQyxLQUFKLENBQVUsdURBQVYsQ0FBZDtBQUNBRCxZQUFNRSxJQUFOLEdBQWF6QixXQUFXQyxjQUF4QjtBQUNBaUIsV0FBS0ssS0FBTDtBQUNBO0FBQ0Q7O0FBRUQsUUFBSU4sSUFBSUssSUFBSixDQUFTSSxTQUFiLEVBQXdCO0FBQ3RCTCxjQUFRLEVBQUVYLFFBQVEsR0FBVixFQUFSO0FBQ0E7QUFDRDs7QUFFRCxRQUFNaUIsVUFBVUMsS0FBS0MsS0FBTCxDQUFXWixJQUFJSyxJQUFKLENBQVNLLE9BQXBCLENBQWhCOztBQUVBO0FBQ0EsUUFBSSxDQUFDQSxRQUFRRyxLQUFULElBQWtCSCxRQUFRRyxLQUFSLEtBQWtCMUIsUUFBUTJCLGlCQUFoRCxFQUFtRTtBQUNqRTVCLFlBQU0sb0NBQU47QUFDQSxVQUFNb0IsU0FBUSxJQUFJQyxLQUFKLENBQVUsK0NBQVYsQ0FBZDtBQUNBRCxhQUFNRSxJQUFOLEdBQWF6QixXQUFXRSwwQkFBeEI7QUFDQWdCLFdBQUtLLE1BQUw7QUFDQTtBQUNEO0FBQ0RwQixVQUFNLG9DQUFOOztBQUVBLFFBQU1NLGlCQUFpQkwsUUFBUTRCLFFBQVIsQ0FBaUJMLE9BQWpCLENBQXZCO0FBQ0EsUUFBSWxCLGNBQUosRUFBb0I7QUFDbEJBLHFCQUFld0IsSUFBZixDQUFvQlosT0FBcEI7QUFDRCxLQUZELE1BRU87QUFDTEg7QUFDRDtBQUNGLEdBdENEO0FBdUNEIiwiZmlsZSI6ImV4cHJlc3MtbWlkZGxld2FyZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBkZWJ1Z0ZhY3RvcnkgZnJvbSAnZGVidWcnO1xuaW1wb3J0IHsgcGFja2FnZUlkZW50aWZpZXIgfSBmcm9tICcuL3V0aWwnO1xuXG5leHBvcnQgY29uc3QgZXJyb3JDb2RlcyA9IHtcbiAgTk9fQk9EWV9QQVJTRVI6ICdTTEFDS01FU1NBR0VNSURETEVXQVJFX05PX0JPRFlfUEFSU0VSJyxcbiAgVE9LRU5fVkVSSUZJQ0FUSU9OX0ZBSUxVUkU6ICdTTEFDS01FU1NBR0VNSURETEVXQVJFX1RPS0VOX1ZFUklGSUNBVElPTl9GQUlMVVJFJyxcbn07XG5cbmNvbnN0IGRlYnVnID0gZGVidWdGYWN0b3J5KCdAc2xhY2svaW50ZXJhY3RpdmUtbWVzc2FnZXM6ZXhwcmVzcy1taWRkbGV3YXJlJyk7XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVFeHByZXNzTWlkZGxld2FyZShhZGFwdGVyKSB7XG4gIGNvbnN0IHBvd2VyZWRCeSA9IHBhY2thZ2VJZGVudGlmaWVyKCk7XG5cbiAgLy8gVGhpcyBmdW5jdGlvbiBiaW5kcyBhIHNwZWNpZmljIHJlc3BvbnNlIGluc3RhbmNlIHRvIGEgZnVuY3Rpb25cbiAgZnVuY3Rpb24gc2VuZFJlc3BvbnNlKHJlcykge1xuICAgIHJldHVybiBmdW5jdGlvbiBfc2VuZFJlc3BvbnNlKGRpc3BhdGNoUmVzdWx0KSB7XG4gICAgICBjb25zdCB7IHN0YXR1cywgY29udGVudCB9ID0gZGlzcGF0Y2hSZXN1bHQ7XG5cbiAgICAgIHJlcy5zdGF0dXMoc3RhdHVzKTtcbiAgICAgIHJlcy5zZXQoJ1gtU2xhY2stUG93ZXJlZC1CeScsIHBvd2VyZWRCeSk7XG5cbiAgICAgIGlmICh0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmVzLnNlbmQoY29udGVudCk7XG4gICAgICB9IGVsc2UgaWYgKGNvbnRlbnQpIHtcbiAgICAgICAgcmVzLmpzb24oY29udGVudCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXMuZW5kKCk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiBzbGFja01lc3NhZ2VBZGFwdGVyTWlkZGxld2FyZShyZXEsIHJlcywgbmV4dCkge1xuICAgIGRlYnVnKCdyZXF1ZXN0IHJlY2VpdmVkIC0gbWV0aG9kOiAlcywgcGF0aDogJXMnLCByZXEubWV0aG9kLCByZXEucGF0aCk7XG5cbiAgICAvLyBCaW5kIGEgcmVzcG9uc2UgZnVuY3Rpb24gdG8gdGhpcyByZXF1ZXN0J3MgcmVzcG9uZCBvYmplY3QuIFRoaXMgbWF5IGJlIHVzZWQgaW4gYSBudW1iZXIgb2ZcbiAgICAvLyBwbGFjZXNcbiAgICBjb25zdCByZXNwb25kID0gc2VuZFJlc3BvbnNlKHJlcyk7XG5cbiAgICAvLyBDaGVjayB0aGF0IHRoZSByZXF1ZXN0IGJvZHkgaGFzIGJlZW4gcGFyc2VkXG4gICAgaWYgKCFyZXEuYm9keSkge1xuICAgICAgY29uc3QgZXJyb3IgPSBuZXcgRXJyb3IoJ1RoZSBpbmNvbWluZyBIVFRQIHJlcXVlc3QgZGlkIG5vdCBoYXZlIGEgcGFyc2VkIGJvZHkuJyk7XG4gICAgICBlcnJvci5jb2RlID0gZXJyb3JDb2Rlcy5OT19CT0RZX1BBUlNFUjtcbiAgICAgIG5leHQoZXJyb3IpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChyZXEuYm9keS5zc2xfY2hlY2spIHtcbiAgICAgIHJlc3BvbmQoeyBzdGF0dXM6IDIwMCB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBwYXlsb2FkID0gSlNPTi5wYXJzZShyZXEuYm9keS5wYXlsb2FkKTtcblxuICAgIC8vIEhhbmRsZSByZXF1ZXN0IHRva2VuIHZlcmlmaWNhdGlvblxuICAgIGlmICghcGF5bG9hZC50b2tlbiB8fCBwYXlsb2FkLnRva2VuICE9PSBhZGFwdGVyLnZlcmlmaWNhdGlvblRva2VuKSB7XG4gICAgICBkZWJ1ZygncmVxdWVzdCB0b2tlbiB2ZXJpZmljYXRpb24gZmFpbHVyZScpO1xuICAgICAgY29uc3QgZXJyb3IgPSBuZXcgRXJyb3IoJ1NsYWNrIGludGVyYWN0aXZlIG1lc3NhZ2UgdmVyaWZpY2F0aW9uIGZhaWxlZCcpO1xuICAgICAgZXJyb3IuY29kZSA9IGVycm9yQ29kZXMuVE9LRU5fVkVSSUZJQ0FUSU9OX0ZBSUxVUkU7XG4gICAgICBuZXh0KGVycm9yKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZGVidWcoJ3JlcXVlc3QgdG9rZW4gdmVyaWZpY2F0aW9uIHN1Y2Nlc3MnKTtcblxuICAgIGNvbnN0IGRpc3BhdGNoUmVzdWx0ID0gYWRhcHRlci5kaXNwYXRjaChwYXlsb2FkKTtcbiAgICBpZiAoZGlzcGF0Y2hSZXN1bHQpIHtcbiAgICAgIGRpc3BhdGNoUmVzdWx0LnRoZW4ocmVzcG9uZCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5leHQoKTtcbiAgICB9XG4gIH07XG59XG4iXX0=
//# sourceMappingURL=express-middleware.js.map