{"version":3,"sources":["../src/http-handler.js"],"names":["createHTTPHandler","debug","errorCodes","SIGNATURE_VERIFICATION_FAILURE","REQUEST_TIME_FAILURE","adapter","poweredBy","sendResponse","res","_sendResponse","dispatchResult","status","content","statusCode","setHeader","end","JSON","stringify","parseBody","body","parsedBody","querystring","parse","payload","verifyRequestSignature","signingSecret","requestHeaders","signature","ts","fiveMinutesAgo","Math","floor","Date","now","error","Error","code","hmac","crypto","createHmac","split","version","hash","update","digest","slackRequestListener","req","method","url","respond","then","r","rawBody","toString","headers","ssl_check","dispatch","catch","process","env","NODE_ENV","message"],"mappings":"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","file":"http-handler.js","sourcesContent":["import debugFactory from 'debug';\nimport getRawBody from 'raw-body';\nimport querystring from 'querystring';\nimport crypto from 'crypto';\nimport timingSafeCompare from 'tsscmp';\nimport { packageIdentifier } from './util';\n\nconst debug = debugFactory('@slack/interactive-messages:http-handler');\n\nexport const errorCodes = {\n  SIGNATURE_VERIFICATION_FAILURE: 'SLACKHTTPHANDLER_REQUEST_SIGNATURE_VERIFICATION_FAILURE',\n  REQUEST_TIME_FAILURE: 'SLACKHTTPHANDLER_REQUEST_TIMELIMIT_FAILURE',\n};\n\nexport function createHTTPHandler(adapter) {\n  const poweredBy = packageIdentifier();\n\n  /**\n   * Handles sending responses\n   *\n   * @param {Object} res - Response object\n   * @returns {Function} Returns a function used to send response\n   */\n  function sendResponse(res) {\n    return function _sendResponse(dispatchResult) {\n      const { status, content } = dispatchResult;\n      res.statusCode = status;\n      res.setHeader('X-Slack-Powered-By', poweredBy);\n      if (typeof content === 'string') {\n        res.end(content);\n      } else if (content) {\n        res.setHeader('Content-Type', 'application/json');\n        res.end(JSON.stringify(content));\n      } else {\n        res.end();\n      }\n    };\n  }\n\n  /**\n   * Parses raw bodies of requests\n   *\n   * @param {string} body - Raw body of request\n   * @returns {Object} Parsed body of the request\n   */\n  function parseBody(body) {\n    const parsedBody = querystring.parse(body);\n    if (parsedBody.payload) {\n      return JSON.parse(parsedBody.payload);\n    }\n\n    return parsedBody;\n  }\n\n  /**\n   * Method to verify signature of requests\n   *\n   * @param {string} signingSecret - Signing secret used to verify request signature\n   * @param {Object} requestHeaders - Request headers\n   * @param {string} body - Raw body string\n   * @returns {boolean} Indicates if request is verified\n   */\n  function verifyRequestSignature(signingSecret, requestHeaders, body) {\n    // Request signature\n    const signature = requestHeaders['x-slack-signature'];\n    // Request timestamp\n    const ts = requestHeaders['x-slack-request-timestamp'];\n\n    // Divide current date to match Slack ts format\n    // Subtract 5 minutes from current time\n    const fiveMinutesAgo = Math.floor(Date.now() / 1000) - (60 * 5);\n\n    if (ts < fiveMinutesAgo) {\n      debug('request is older than 5 minutes');\n      const error = new Error('Slack request signing verification failed');\n      error.code = errorCodes.REQUEST_TIME_FAILURE;\n      throw error;\n    }\n\n    const hmac = crypto.createHmac('sha256', signingSecret);\n    const [version, hash] = signature.split('=');\n    hmac.update(`${version}:${ts}:${body}`);\n\n    if (!timingSafeCompare(hash, hmac.digest('hex'))) {\n      debug('request signature is not valid');\n      const error = new Error('Slack request signing verification failed');\n      error.code = errorCodes.SIGNATURE_VERIFICATION_FAILURE;\n      throw error;\n    }\n\n    debug('request signing verification success');\n    return true;\n  }\n\n  /**\n   * Request listener used to handle Slack requests and send responses and\n   * verify request signatures\n   *\n   * @param {Object} req - Request object\n   * @param {Object} res - Response object\n   */\n  return function slackRequestListener(req, res) {\n    debug('request received - method: %s, path: %s', req.method, req.url);\n    // Function used to send response\n    const respond = sendResponse(res);\n\n    // Builds body of the request from stream and returns the raw request body\n    getRawBody(req)\n      .then((r) => {\n        const rawBody = r.toString();\n\n        if (verifyRequestSignature(adapter.signingSecret, req.headers, rawBody)) {\n          // Request signature is verified\n          // Parse raw body\n          const body = parseBody(rawBody);\n\n          if (body.ssl_check) {\n            respond({ status: 200 });\n            return;\n          }\n\n          const dispatchResult = adapter.dispatch(body);\n\n          if (dispatchResult) {\n            dispatchResult.then(respond);\n          } else {\n            // No callback was matched\n            debug('no callback was matched');\n            respond({ status: 404 });\n          }\n        }\n      }).catch((error) => {\n        if (error.code === errorCodes.SIGNATURE_VERIFICATION_FAILURE ||\n          error.code === errorCodes.REQUEST_TIME_FAILURE) {\n          respond({ status: 404 });\n        } else if (process.env.NODE_ENV === 'development') {\n          respond({ status: 500, content: error.message });\n        } else {\n          respond({ status: 500 });\n        }\n      });\n  };\n}\n"]}