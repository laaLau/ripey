{"version":3,"sources":["../src/express-middleware.js"],"names":["createExpressMiddleware","errorCodes","NO_BODY_PARSER","TOKEN_VERIFICATION_FAILURE","debug","adapter","poweredBy","sendResponse","res","_sendResponse","dispatchResult","status","content","set","send","json","end","slackMessageAdapterMiddleware","req","next","method","path","respond","body","error","Error","code","ssl_check","payload","JSON","parse","token","verificationToken","dispatch","then"],"mappings":";;;;;;QAUgBA,uB,GAAAA,uB;;AAVhB;;;;AACA;;;;AAEO,IAAMC,kCAAa;AACxBC,kBAAgB,uCADQ;AAExBC,8BAA4B;AAFJ,CAAnB;;AAKP,IAAMC,QAAQ,qBAAa,gDAAb,CAAd;;AAEO,SAASJ,uBAAT,CAAiCK,OAAjC,EAA0C;AAC/C,MAAMC,YAAY,8BAAlB;;AAEA;AACA,WAASC,YAAT,CAAsBC,GAAtB,EAA2B;AACzB,WAAO,SAASC,aAAT,CAAuBC,cAAvB,EAAuC;AAAA,UACpCC,MADoC,GAChBD,cADgB,CACpCC,MADoC;AAAA,UAC5BC,OAD4B,GAChBF,cADgB,CAC5BE,OAD4B;;;AAG5CJ,UAAIG,MAAJ,CAAWA,MAAX;AACAH,UAAIK,GAAJ,CAAQ,oBAAR,EAA8BP,SAA9B;;AAEA,UAAI,OAAOM,OAAP,KAAmB,QAAvB,EAAiC;AAC/BJ,YAAIM,IAAJ,CAASF,OAAT;AACD,OAFD,MAEO,IAAIA,OAAJ,EAAa;AAClBJ,YAAIO,IAAJ,CAASH,OAAT;AACD,OAFM,MAEA;AACLJ,YAAIQ,GAAJ;AACD;AACF,KAbD;AAcD;;AAED,SAAO,SAASC,6BAAT,CAAuCC,GAAvC,EAA4CV,GAA5C,EAAiDW,IAAjD,EAAuD;AAC5Df,UAAM,yCAAN,EAAiDc,IAAIE,MAArD,EAA6DF,IAAIG,IAAjE;;AAEA;AACA;AACA,QAAMC,UAAUf,aAAaC,GAAb,CAAhB;;AAEA;AACA,QAAI,CAACU,IAAIK,IAAT,EAAe;AACb,UAAMC,QAAQ,IAAIC,KAAJ,CAAU,uDAAV,CAAd;AACAD,YAAME,IAAN,GAAazB,WAAWC,cAAxB;AACAiB,WAAKK,KAAL;AACA;AACD;;AAED,QAAIN,IAAIK,IAAJ,CAASI,SAAb,EAAwB;AACtBL,cAAQ,EAAEX,QAAQ,GAAV,EAAR;AACA;AACD;;AAED,QAAMiB,UAAUC,KAAKC,KAAL,CAAWZ,IAAIK,IAAJ,CAASK,OAApB,CAAhB;;AAEA;AACA,QAAI,CAACA,QAAQG,KAAT,IAAkBH,QAAQG,KAAR,KAAkB1B,QAAQ2B,iBAAhD,EAAmE;AACjE5B,YAAM,oCAAN;AACA,UAAMoB,SAAQ,IAAIC,KAAJ,CAAU,+CAAV,CAAd;AACAD,aAAME,IAAN,GAAazB,WAAWE,0BAAxB;AACAgB,WAAKK,MAAL;AACA;AACD;AACDpB,UAAM,oCAAN;;AAEA,QAAMM,iBAAiBL,QAAQ4B,QAAR,CAAiBL,OAAjB,CAAvB;AACA,QAAIlB,cAAJ,EAAoB;AAClBA,qBAAewB,IAAf,CAAoBZ,OAApB;AACD,KAFD,MAEO;AACLH;AACD;AACF,GAtCD;AAuCD","file":"express-middleware.js","sourcesContent":["import debugFactory from 'debug';\nimport { packageIdentifier } from './util';\n\nexport const errorCodes = {\n  NO_BODY_PARSER: 'SLACKMESSAGEMIDDLEWARE_NO_BODY_PARSER',\n  TOKEN_VERIFICATION_FAILURE: 'SLACKMESSAGEMIDDLEWARE_TOKEN_VERIFICATION_FAILURE',\n};\n\nconst debug = debugFactory('@slack/interactive-messages:express-middleware');\n\nexport function createExpressMiddleware(adapter) {\n  const poweredBy = packageIdentifier();\n\n  // This function binds a specific response instance to a function\n  function sendResponse(res) {\n    return function _sendResponse(dispatchResult) {\n      const { status, content } = dispatchResult;\n\n      res.status(status);\n      res.set('X-Slack-Powered-By', poweredBy);\n\n      if (typeof content === 'string') {\n        res.send(content);\n      } else if (content) {\n        res.json(content);\n      } else {\n        res.end();\n      }\n    };\n  }\n\n  return function slackMessageAdapterMiddleware(req, res, next) {\n    debug('request received - method: %s, path: %s', req.method, req.path);\n\n    // Bind a response function to this request's respond object. This may be used in a number of\n    // places\n    const respond = sendResponse(res);\n\n    // Check that the request body has been parsed\n    if (!req.body) {\n      const error = new Error('The incoming HTTP request did not have a parsed body.');\n      error.code = errorCodes.NO_BODY_PARSER;\n      next(error);\n      return;\n    }\n\n    if (req.body.ssl_check) {\n      respond({ status: 200 });\n      return;\n    }\n\n    const payload = JSON.parse(req.body.payload);\n\n    // Handle request token verification\n    if (!payload.token || payload.token !== adapter.verificationToken) {\n      debug('request token verification failure');\n      const error = new Error('Slack interactive message verification failed');\n      error.code = errorCodes.TOKEN_VERIFICATION_FAILURE;\n      next(error);\n      return;\n    }\n    debug('request token verification success');\n\n    const dispatchResult = adapter.dispatch(payload);\n    if (dispatchResult) {\n      dispatchResult.then(respond);\n    } else {\n      next();\n    }\n  };\n}\n"]}